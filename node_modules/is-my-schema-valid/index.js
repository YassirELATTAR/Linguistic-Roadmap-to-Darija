'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _isMyJsonValid = require('is-my-json-valid');

var _isMyJsonValid2 = _interopRequireDefault(_isMyJsonValid);

var _uniqueBy = require('unique-by');

var _uniqueBy2 = _interopRequireDefault(_uniqueBy);

var _traverse = require('traverse');

var _traverse2 = _interopRequireDefault(_traverse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var schemaPattern = {
    type: 'object',
    required: true,
    additionalProperties: false
};
var customFormats = {
    'mongo-object-id': /^[a-fA-F0-9]{24}$/i,
    'alpha': /^[A-Z]+$/i,
    'alphanumeric': /^[0-9A-Z]+$/i,
    'numeric': /^[-+]?[0-9]+$/,
    'hexadecimal': /^[0-9A-F]+$/i,
    'hexcolor': /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i,
    'decimal': /^[-+]?([0-9]+|\.[0-9]+|[0-9]+\.[0-9]+)$/,
    'float': /^(?:[-+]?(?:[0-9]+))?(?:\.[0-9]*)?(?:[eE][\+\-]?(?:[0-9]+))?$/,
    'int': /^(?:[-+]?(?:0|[1-9][0-9]*))$/,
    'base64': /^(?:[A-Z0-9+\/]{4})*(?:[A-Z0-9+\/]{2}==|[A-Z0-9+\/]{3}=|[A-Z0-9+\/]{4})$/i,
    'uuid': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
    'data-uri': /^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i
};

function _parseValidatorErrors(errors) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return (0, _uniqueBy2.default)(errors, function (obj) {
        return obj.message && obj.field;
    }).map(function (error) {
        var key = error.field.split(/\.(.+)/)[1];
        var err = {};

        if (key) {
            err.key = key;
            err.message = error.message;
        } else {
            err.message = options.title ? options.title + ' ' + error.message : 'data ' + error.message;
        }

        if (options.debug) {
            err._raw = error;
        }

        return err;
    });
}

function validate(data) {
    var schema = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var schemaObj = schema.type ? schema : _extends({}, schemaPattern, { properties: schema });
    var formats = options.formats ? _extends({}, customFormats, options.formats) : customFormats;
    var validator = (0, _isMyJsonValid2.default)(schemaObj, { formats: formats });

    if (options.filter) {
        var filter = _isMyJsonValid2.default.filter(schemaObj);
        data = filter(data);
    }

    var validatedData = validator(data);
    if (!validatedData) {
        return {
            valid: false,
            errors: _parseValidatorErrors(validator.errors, {
                title: schema.title,
                debug: options.debug
            })
        };
    }

    if (validatedData && options.filterReadonly) {
        (function () {
            var readonlyProperties = (0, _traverse2.default)(schemaObj).reduce(function (memo, value) {
                if (this.key === 'readonly' && value === true) {
                    memo.push(this.parent.key);
                }
                return memo;
            }, []);

            (0, _traverse2.default)(data).forEach(function () {
                if (readonlyProperties.indexOf(this.key) !== -1) {
                    this.remove();
                }
            });
        })();
    }

    return {
        valid: true
    };
}

exports.default = validate;
